import * as React from 'react';
import { Service } from './service';
import { GameState } from './gameState';

interface Offset {
    dx: number;
    dy: number;
}

interface Location {
    x: number;
    y: number;
}

interface Effect {
    offset: Offset;
    amount: number;
}

export interface RuneType {
    id: 'a'|'b'|'c'|'d'|'e'|'f',
    effects: Effect[]
}

export const Runes: RuneType[] = [
    {
        id: 'a',
        effects: [
            { offset: { dx: 0, dy: -1 }, amount: 1 },
            { offset: { dx: 0, dy: 1 }, amount: -1 }
        ]
    },
    {
        id: 'b',
        effects: [
            { offset: { dx: 1, dy: 1 }, amount: 1 },
            { offset: { dx: -1, dy: -1 }, amount: 1 }
        ]
    },
    {
        id: 'c',
        effects: [
            { offset: { dx: 1, dy: 0 }, amount: 1 },
            { offset: { dx: 0, dy: -1 }, amount: 1 }
        ]
    },
    {
        id: 'd',
        effects: [
            { offset: { dx: -1, dy: 1 }, amount: 1 },
            { offset: { dx: 1, dy: 1 }, amount: 1 }
        ]
    },
    {
        id: 'e',
        effects: [
            { offset: { dx: 0, dy: 0 }, amount: 2 },
            { offset: { dx: 0, dy: 2 }, amount: 2 }
        ]
    },
    {
        id: 'f',
        effects: [
            { offset: { dx: -1, dy: 0 }, amount: 1 },
            { offset: { dx: 0, dy: 1 }, amount: 1 }
        ]
    }
];

const easyBoardRunes: Array<Array<RuneType>> = [
    [Runes[4], Runes[1], Runes[5]],
    [Runes[3], Runes[4], Runes[2]],
    [Runes[2], Runes[1], Runes[2]],
];

const mediumBoardRunes: Array<Array<RuneType>> = [
    [Runes[0], Runes[5], Runes[2], Runes[3]],
    [Runes[0], Runes[2], Runes[3], Runes[1]],
    [Runes[3], Runes[5], Runes[1], Runes[0]],
    [Runes[2], Runes[5], Runes[2], Runes[5]],
];


interface BoardProps {
    service: Service;
    viewOnly: boolean;
}

interface BoardState {
    runes: Array<Array<RuneType>>;
    active: Array<Array<boolean>>;
    charge: Array<Array<number>>;
    isValid: boolean;
}

export class Board extends React.Component<BoardProps, BoardState> {
    constructor(props: BoardProps) {
        super(props);

        this.CalculateCharge = this.CalculateCharge.bind(this);
        this.Activate = this.Activate.bind(this);
        this.Reset = this.Reset.bind(this);
        this.InBounds = this.InBounds.bind(this);
        this.Boxed = this.Boxed.bind(this);
        this.GetRune = this.GetRune.bind(this);
        this.ReceiveUpdate = this.ReceiveUpdate.bind(this);

        let active: Array<Array<boolean>> = [];
        let charge: Array<Array<number>> = [];

        for (let y = 0; y < easyBoardRunes.length; y++) {
            active.push([]);
            charge.push([]);
            for (let x = 0; x < easyBoardRunes.length; x++) {
                active[active.length - 1].push(false);
                charge[charge.length - 1].push(0);
            }
        }

        this.state = { active, charge, isValid: true, runes: easyBoardRunes };
    }

    ReceiveUpdate(gameState: GameState) {
        if (gameState.loaded || this.props.viewOnly) {
            let charge = this.CalculateCharge(this.state.runes, gameState.activeRunes);
            this.setState({ active: gameState.activeRunes, charge }, () => this.CheckFailure());
        }
    }

    CheckFailure() {
        if (!this.state.isValid) {
            return;
        }

        let totalZeroes = 0;

        for (let y = 0; y < this.state.runes.length; y++) {
            for (let x = 0; x < this.state.runes[0].length; x++) {
                if (this.state.active[y][x] && this.state.charge[y][x] < 0.9) {
                    totalZeroes += 1;

                    if (totalZeroes > 1) {
                        this.setState({ isValid: false });
                        return;
                    }
                }
            }
        }
    }

    CalculateCharge(runes: Array<Array<RuneType>>, active: Array<Array<boolean>>): Array<Array<number>> {
        let charge: Array<Array<number>> = [];

        for (let y = 0; y < this.state.runes.length; y++) {
            charge.push([]);
            for (let x = 0; x < this.state.runes.length; x++) {
                charge[charge.length - 1].push(0);
            }
        }

        for (let y = 0; y < this.state.runes.length; y++) {
            for (let x = 0; x < this.state.runes.length; x++) {
                if (active[y][x]) {
                    let rune = runes[y][x];
                    for (let effect of rune.effects) {
                        let effectX = effect.offset.dx + x;
                        let effectY = effect.offset.dy + y;

                        if (this.InBounds(effectX, effectY)) {
                            charge[effectY][effectX] += effect.amount;
                        }
                    }
                }
            }
        }

        return charge;
    }

    InBounds(x: number, y: number) {
        return x >= 0 && y >= 0 && this.state.runes.length > y && this.state.runes[0].length > x;
    }

    componentDidUpdate(prevProps: BoardProps, prevState: BoardState) {
        let updated = false;

        if (prevState.runes.length != this.state.runes.length ||
            prevState.runes[0].length != this.state.runes[0].length) {
            updated = true;
        } else if (prevState.isValid != this.state.isValid) {
            updated = true;
        } else {
            for (let r = 0; r < this.state.active.length; r++) {
                for (let c = 0; c < this.state.active[r].length; c++) {
                    if (this.state.active[r][c] != prevState.active[r][c]) {
                        updated = true;
                        break;
                    }
                }

                if (updated) {
                    break;
                }
            }
        }

        if (updated && !this.props.viewOnly) {
            this.props.service.updateGameState({ runesValid: this.state.isValid, activeRunes: this.state.active })
        }
    }

    componentWillUnmount() {
        for (let i = this.props.service.updateFunctions.length; i >= 0; i--) {
            if (this.props.service.updateFunctions[i] == this.ReceiveUpdate) {
                this.props.service.updateFunctions.splice(i, 1);
            }
        }
    }

    render() {
        let height = this.state.runes.length;
        let width = this.state.runes[0].length;

        return <svg width="800" height="800">
            <image href='src/stone.png' height="800" width="800"/>
            {
                this.state.runes.flatMap((runes, y) =>
                    runes.map((rune, x) => 
                        this.GetRune(rune.id, x, y, width, height)))
            }
        </svg>
    }

    GetRune(type: 'a'|'b'|'c'|'d'|'e'|'f', x: number, y: number, width: number, height: number) : JSX.Element {
        let runeSvg: JSX.Element;

        switch (type) {
            case 'a':
                runeSvg = this.Ch();
                break;
            case 'b':
                runeSvg = this.S();
                break;
            case 'c':
                runeSvg = this.Ng();
                break;
            case 'd':
                runeSvg = this.Ai();
                break;
            case 'e':
                runeSvg = this.U()
                break;
            case 'f':
                runeSvg = this.Nn();
                break;
        }
        return this.Boxed(runeSvg, x, y);
    }

    Activate(x: number, y: number) {
        if (this.props.viewOnly) {
            return;
        }

        if (!this.state.isValid) {
            this.Reset();
            return;
        }

        let active = this.state.active.map(row => row.slice());
        active[y][x] = true;

        let charge = this.CalculateCharge(this.state.runes, active);

        this.setState({ active, charge }, () => this.CheckFailure());
    }

    Reset() {
        let active: Array<Array<boolean>> = [];
        let charge: Array<Array<number>> = [];

        for (let y = 0; y < this.state.runes.length; y++) {
            active.push([]);
            charge.push([]);
            for (let x = 0; x < this.state.runes.length; x++) {
                active[active.length - 1].push(false);
                charge[charge.length - 1].push(0);
            }
        }

        this.setState({ active, charge, isValid: true });
    }

    Boxed(component, x: number, y: number) : JSX.Element {
        let active = this.state.active[y][x];
        let className = active ? 'active' : '';
        if (!this.state.isValid) {
            className += ' broken';
        }

        let xBasis = 25;
        let xOffset = 75;

        let yBasis = 25;
        let yOffset = 75;

        return <svg
                    x={xBasis + x * xOffset}
                    y={yBasis + y * yOffset}
                    width={75}
                    height={75}
                    key={`${x}-${y}`}
                    className={className}>
            <g className={`letter-container ${className}`} onClick={() => this.Activate(x, y)}>
                <rect className="letter-container" width="75" height="75"></rect>
                { component }
            </g>
        </svg>;
    }

    E() {
        return <path
        className="letter"
   d="M 35.086164,60.737002 L 32.130394,57.754721 L 34.234193,57.224979 C 36.652778,56.615972 38.471913,54.755982 39.276968,52.068945 C 40.038759,49.526319 39.021558,47.361765 36.245467,45.618057 C 23.648085,37.705428 19.391261,33.783542 16.404468,27.338209 C 15.176482,24.688282 15.106914,24.152009 14.933202,15.996854 C 14.802927,9.8808845 14.59429,7.4369452 14.202451,7.4369452 C 13.617277,7.4369452 7.818182,1.7803888 7.818182,1.2095989 C 7.818182,1.0230616 17.47446,0.87317181 29.276582,0.8765098 L 50.734981,0.88257727 L 53.730109,3.9252431 L 56.725237,6.967909 L 51.384929,6.9743142 C 43.18815,6.9841451 43.935401,6.1217789 43.925814,15.582522 C 43.913835,27.402321 42.494031,32.830818 38.694762,35.582995 C 34.943577,38.30034 31.445618,37.741404 26.897167,33.697867 L 24.635011,31.686829 L 25.590763,30.731078 C 26.50378,29.818061 26.587096,29.81205 27.45406,30.596641 C 28.139326,31.216798 28.776207,31.340176 30.054393,31.100388 C 35.150175,30.144414 37.812118,23.928744 37.828345,12.948119 L 37.83649,7.4369452 L 29.355451,7.4369452 L 20.874413,7.4369452 L 21.03259,18.107517 C 21.179979,28.050322 21.26146,28.91059 22.227274,30.720862 C 23.606732,33.306449 27.161095,36.34475 32.382255,39.401425 C 37.45199,42.369452 42.795858,47.431633 44.43915,50.822782 C 47.190484,56.50052 44.971044,61.641192 38.994543,63.43359 C 38.258244,63.654408 37.370764,63.042091 35.086164,60.737002 z"/>
    }

    S() {
        return <path
        className="letter"
       d="M 29.39896,53.300569 C 28.229051,52.007012 22.16043,45.660925 15.913137,39.19815 C 9.6658438,32.735374 4.1520455,26.822563 3.6602523,26.05857 C 2.4304605,24.148107 2.7380359,21.772394 4.3724212,20.557772 C 6.4808795,18.990834 8.4377723,19.765403 12.305075,23.697637 L 15.626784,27.075118 L 15.626784,17.23624 L 15.626784,7.3973621 L 11.059408,7.3973621 L 6.4920326,7.3973621 L 3.6778339,4.5534894 C 2.1300235,2.9893592 0.86363455,1.549952 0.86363455,1.354808 C 0.86363455,1.159663 13.547886,0.99999842 29.050859,0.99999842 L 57.238086,0.99999842 L 60.408334,4.1986808 L 63.578582,7.3973621 L 56.580304,7.3973621 L 49.582025,7.3973621 L 49.582025,30.881158 L 49.582025,54.364952 L 46.383343,51.194704 L 43.18466,48.024456 L 43.18466,41.489848 L 43.18466,34.95524 L 31.941853,34.95524 C 22.560379,34.95524 20.43428,35.087323 19.099812,35.753043 L 17.500579,36.550845 L 20.131442,39.314423 C 21.578417,40.834388 25.198225,44.583805 28.17546,47.646455 C 31.152695,50.709109 33.643104,53.276204 33.7097,53.351112 C 33.776297,53.42602 33.312224,53.974477 32.678427,54.569899 L 31.526069,55.65248 L 29.39896,53.300569 z M 11.417784,27.8909 C 11.045731,26.408521 10.603613,26.264761 9.7138631,27.336844 C 9.2060113,27.948768 9.2554184,28.263055 9.9864527,29.070839 C 11.091232,30.291607 11.861047,29.656998 11.417784,27.8909 z M 43.18466,17.977619 L 43.18466,7.3973621 L 32.604404,7.3973621 L 22.024147,7.3973621 L 22.024147,17.64955 C 22.024147,23.288252 22.171778,28.049368 22.352218,28.229805 C 22.532656,28.410244 27.293772,28.557875 32.932475,28.557875 L 43.18466,28.557875 L 43.18466,17.977619 z"/>
    }

    U() {
        return <path
        className="letter"
       d="M 32.241512,62.338941 C 25.887531,60.691171 20.918594,57.417161 12.916764,49.605961 C 9.6759391,46.442341 6.8248159,43.482944 6.5809331,43.029512 C 6.2747071,42.460172 6.4155845,41.861687 7.0362561,41.095192 L 7.9350003,39.985289 L 13.86958,45.900665 C 20.894551,52.9029 24.337209,55.026817 29.30905,55.425906 C 33.663544,55.775446 36.492607,54.880459 39.456416,52.215736 C 43.035554,48.997785 44.670953,45.344714 44.646189,40.623087 C 44.625974,36.768659 43.272581,32.948521 41.715582,32.351044 C 41.341799,32.20761 40.176584,32.642858 39.126214,33.318262 C 38.075846,33.993666 36.352278,34.819043 35.296063,35.152435 L 33.375672,35.758604 L 29.95379,32.362941 C 28.071754,30.495327 26.697206,28.828525 26.899239,28.658937 C 27.101273,28.489351 28.196706,28.086388 29.333537,27.763464 C 31.878685,27.040498 36.141195,23.301914 37.583318,20.527705 C 39.580935,16.684888 38.801978,10.544369 36.164431,9.342623 C 35.380831,8.9855901 31.351113,8.7805937 25.116361,8.7805937 L 15.30181,8.7805937 L 11.595505,5.0493874 L 7.8892018,1.3181819 L 29.28145,1.3181819 L 50.6737,1.3181819 L 54.380001,5.0493874 L 58.086302,8.7805937 L 49.527832,8.7805937 L 40.969358,8.7805937 L 42.872517,11.72515 C 43.919255,13.344655 45.064038,15.699633 45.41648,16.958433 C 46.205587,19.776845 45.860577,24.876082 44.717851,27.2842 L 43.882197,29.04521 L 46.650642,32.718363 C 50.644572,38.017483 51.636445,40.777215 51.640495,46.601838 C 51.643516,50.955787 51.511356,51.608618 50.009565,54.658064 C 47.496126,59.761693 43.54802,62.368218 37.713948,62.775586 C 36.072217,62.890224 33.609621,62.693734 32.241512,62.338941 z"/>;
    }

    Ai() {
        return <path
        className="letter"
       d="M 34.841474,61.291692 L 32.661153,59.091814 L 34.213021,58.70105 C 35.997088,58.251817 37.33897,56.879796 37.93282,54.897705 C 38.494753,53.022141 37.744415,51.425458 35.696635,50.139215 C 26.404187,44.302469 23.264143,41.409493 21.060938,36.655099 C 20.155115,34.700385 20.103799,34.304802 19.97566,28.289159 C 19.879563,23.777718 19.725662,21.97495 19.436621,21.97495 C 19.004969,21.97495 14.72727,17.802394 14.72727,17.381351 C 14.72727,17.243754 19.70235,17.131174 25.783002,17.131174 L 36.838734,17.131174 L 35.1927,14.276804 C 34.287381,12.706902 33.438339,11.137703 33.305942,10.789696 C 32.657436,9.0851197 30.433648,6.2830788 29.379937,5.8428103 C 27.101225,4.8907029 24.380536,5.4119334 22.456513,7.1692026 L 21.709145,7.8517958 L 19.573995,5.7166468 C 17.514527,3.6571788 17.460221,3.5578762 18.04192,2.9151073 C 18.720312,2.1654926 20.573372,1.5118904 21.181132,1.2159058 C 22.584788,0.5323125 24.493894,0.79252368 25.637271,1.2159058 C 26.780647,1.6392878 29.634466,2.9591181 31.20163,4.4036806 C 33.300738,6.3385696 34.913067,8.5936505 37.565395,13.304346 L 39.817469,17.304165 L 43.091613,17.404663 L 46.365754,17.50516 L 48.589695,19.740056 L 50.813631,21.97495 L 46.090841,21.97495 L 41.368043,21.97495 L 41.362036,27.943175 C 41.353215,36.705335 40.310371,40.703467 37.503354,42.73686 C 34.736297,44.741306 32.156029,44.329006 28.800869,41.346296 L 27.132191,39.862854 L 27.837201,39.157845 C 28.510686,38.48436 28.572144,38.479924 29.21166,39.058679 C 29.717146,39.516136 30.186941,39.607147 31.129793,39.430266 C 34.888692,38.725093 36.852272,34.140109 36.864243,26.040262 L 36.870249,21.97495 L 30.614219,21.97495 L 24.358188,21.97495 L 24.474869,29.846087 C 24.583591,37.180388 24.643694,37.814964 25.356127,39.15031 C 26.373681,41.057568 28.995555,43.298766 32.846939,45.553521 C 36.586627,47.742883 40.528525,51.476995 41.740697,53.978474 C 43.770218,58.166654 42.133048,61.958665 37.724487,63.280827 C 37.181358,63.443713 36.526708,62.992037 34.841474,61.291692 z"/>;
    }

    Ch() {
        return <path
        className="letter"
       d="M 49.646576,58.332049 L 44.513099,53.181043 L 42.322138,55.109603 C 37.209812,59.609654 30.508967,62.163803 23.648378,62.227448 C 19.538243,62.265579 18.919862,62.13742 15.796877,60.600237 C 13.746336,59.590927 11.307256,57.829453 9.6238152,56.142127 C 6.4364918,52.373229 2.7731647,46.658853 2.6363614,42.730884 C 2.4995581,38.802915 4.1533818,37.23783 6.1348019,35.109687 L 7.6083848,33.869749 L 5.8641932,31.584733 C 4.3768541,29.306154 2.6648318,26.99891 2.6363614,24.429509 C 2.6078911,21.860108 4.0995212,20.06114 5.8012622,18.21825 C 8.5183146,15.614857 12.047519,14.371116 16.85038,14.324384 L 20.429812,14.289557 L 24.203956,18.061042 L 27.978099,21.832529 L 24.512912,21.584596 C 18.161499,21.130154 13.14078,23.289432 11.058537,27.370964 C 8.9905467,31.424559 9.8992637,32.230794 17.06401,32.699162 L 21.351709,32.979455 L 24.717538,36.371274 L 28.083366,39.763093 L 22.655683,39.773956 C 18.396691,39.782482 16.782401,39.987126 15.158528,40.724391 C 12.323507,42.011531 10.298436,45.111572 10.317157,48.135709 C 10.349832,53.413931 12.08038,55.091732 17.495052,55.094828 C 23.7012,55.098375 29.574604,52.832664 35.035048,48.328637 L 38.245227,45.680729 L 36.075327,41.60899 C 32.992934,35.824987 32.106523,32.811527 32.113204,28.139247 C 32.120191,23.252053 33.374596,20.095675 36.54738,16.981823 C 38.685816,14.883108 38.744482,14.742435 38.744482,11.713412 L 38.744482,8.6012915 L 24.510552,8.6012915 L 10.276622,8.6012915 L 6.951123,5.2501142 C 5.1220993,3.4069661 3.6256249,1.7375845 3.6256249,1.5403762 C 3.6256249,1.3431679 15.038641,1.1818155 28.987884,1.1818155 L 54.350142,1.1818155 L 58.035119,4.8915535 L 61.720096,8.6012915 L 53.942026,8.6012915 L 46.163957,8.6012915 L 46.163957,12.298014 C 46.163957,15.994651 46.164007,15.994784 48.29206,18.122837 C 53.469713,23.300493 54.781402,31.115464 52.005854,40.249425 C 51.03283,43.451513 48.704203,48.142798 47.286721,49.756653 C 46.611262,50.525692 47.006028,51.070845 51.793133,55.979808 L 57.039851,61.360087 L 55.909954,62.421576 L 54.780056,63.48306 L 49.646576,58.332049 z M 43.187977,37.740802 C 45.500556,32.958678 46.262532,29.634438 46.06413,25.193087 L 45.916642,21.891372 L 43.858115,23.656245 C 40.922243,26.173309 39.239112,29.792198 39.239112,33.587538 C 39.239112,36.341947 40.410001,41.741621 41.007279,41.741621 C 41.14255,41.741621 42.123864,39.941254 43.187977,37.740802 z"/>;
    }

    Dh() {
        return <path
        className="letter"
       d="M 45.031842,54.443981 L 41.802448,51.185625 L 41.802448,47.159004 C 41.802448,44.944365 41.743794,43.132508 41.672105,43.132649 C 41.600416,43.132795 40.314181,43.599491 38.813806,44.169756 C 31.199575,47.063775 24.649189,45.365291 18.260008,38.840259 C 15.038718,35.550473 13.552032,32.397764 13.26034,28.237815 C 12.984002,24.296801 13.572603,22.408459 15.668627,20.511583 L 16.752992,19.530246 L 15.204588,17.575227 C 13.31305,15.186965 11.053417,10.446541 11.046496,8.8520706 C 11.04201,7.8189937 10.774983,7.6789798 8.8092435,7.6789798 C 6.7820715,7.6789798 6.303275,7.4022828 3.595506,4.6659626 C 1.955638,3.0088035 0.6139286,1.4837855 0.6139286,1.2770342 C 0.6139286,1.0702827 4.3091642,0.92947022 8.8255632,0.9641192 L 17.037199,1.027116 L 20.38512,4.6137339 L 23.733042,8.2003534 L 21.639017,8.2003534 C 20.2725,8.2003534 19.245215,8.5316043 18.682127,9.1538113 C 17.456335,10.508295 17.542584,14.808761 18.834858,16.769123 C 19.761403,18.17468 20.06908,18.290022 22.611381,18.184872 C 25.298406,18.073735 25.474272,18.155818 28.637764,20.997626 C 30.429986,22.607604 31.896347,24.140734 31.896347,24.404584 C 31.896347,24.668434 30.457678,24.88431 28.699302,24.88431 C 23.104405,24.88431 19.904754,27.814945 19.904754,32.939442 C 19.904754,35.339991 20.132288,36.108088 21.142726,37.118526 C 22.870199,38.846 26.264099,39.262478 30.26378,38.237807 C 33.80255,37.331217 35.467919,36.436476 38.068176,34.044796 C 41.536899,30.854313 41.802448,29.740928 41.802448,18.38791 L 41.802448,8.2003534 L 39.198419,8.2003534 C 36.695006,8.2003534 36.473409,8.076331 33.463309,4.990554 C 31.741213,3.2251644 30.332227,1.5828376 30.332227,1.340938 C 30.332227,1.0990393 36.256335,0.92947022 43.496912,0.9641192 L 56.661596,1.027116 L 60.00952,4.6137339 L 63.357438,8.2003534 L 55.973744,8.2003534 L 48.590044,8.2003534 L 48.591056,32.785929 C 48.591614,46.307998 48.517632,57.445941 48.426651,57.53692 C 48.335671,57.6279 46.808008,56.236077 45.031842,54.443981 z"/>;
    }

    M() {
        return <path
        className="letter"
       d="M 45.33289,52.823991 L 41.908805,49.499144 L 41.908805,42.948505 L 41.908805,36.39787 L 31.129282,36.534775 L 20.349757,36.671682 L 20.096121,39.739565 C 19.792008,43.417985 18.641087,45.360851 16.149446,46.401924 C 10.512577,48.757157 1.3828019,41.722566 1.3382065,34.989701 C 1.3131014,31.199362 3.4649555,29.823513 9.4182233,29.823513 L 13.501588,29.823513 L 13.501588,18.917171 L 13.501588,8.0108279 L 10.823758,8.0108279 C 8.2110833,8.0108279 8.0691386,7.9333518 4.9901324,4.8267304 C 3.2544441,3.0754777 1.8343375,1.4775708 1.8343375,1.2758287 C 1.8343375,1.0740855 14.218109,0.93660491 29.35383,0.97031517 L 56.873321,1.0316081 L 60.130694,4.521218 L 63.388054,8.0108279 L 56.20425,8.0108279 L 49.020446,8.0108279 L 48.888713,32.079832 L 48.756974,56.148832 L 45.33289,52.823991 z M 11.852955,38.799406 C 13.369585,37.422255 13.306384,36.418047 11.703078,36.418047 C 10.274325,36.418047 7.9215983,38.461176 7.9215983,39.701918 C 7.9215983,40.764412 10.286931,40.221407 11.852955,38.799406 z M 41.908805,18.917171 L 41.908805,8.0108279 L 31.002462,8.0108279 L 20.096121,8.0108279 L 20.096121,18.917171 L 20.096121,29.823513 L 31.002462,29.823513 L 41.908805,29.823513 L 41.908805,18.917171 z"/>;
    }

    Ng() {
        return <path
        className="letter"
       d="M 24.137262,62.507368 C 18.754072,61.205684 13.578272,57.875903 5.751158,50.678919 L 1.9145214,47.151155 L 3.245857,45.991958 L 4.5771936,44.832754 L 7.583555,47.762844 C 14.306688,54.315404 18.446591,56.140451 25.491802,55.657563 C 35.192449,54.992661 42.293282,47.541691 41.149787,39.22749 C 40.567084,34.990729 38.630883,34.843208 28.765145,38.283893 C 19.550431,41.497533 14.806149,40.763329 9.3169991,35.274179 C 3.2464221,29.203602 2.6445972,21.080548 7.9647696,17.022655 C 10.397396,15.1672 13.165913,14.736261 22.740625,14.722692 L 31.383914,14.710444 L 31.383914,11.704083 L 31.383914,8.6977217 L 19.219765,8.6977217 L 7.0556182,8.6977217 L 3.6869001,5.3029907 C 1.8341057,3.4358885 0.31818218,1.7448109 0.31818218,1.5450388 C 0.31818218,1.3452676 12.894173,1.1818187 28.264828,1.1818187 L 56.211476,1.1818187 L 59.944345,4.9397707 L 63.677212,8.6977217 L 51.288515,8.6977217 L 38.899817,8.6977217 L 38.899817,15.462034 L 38.899817,22.226347 L 28.495,22.226347 C 19.326407,22.226347 17.88275,22.336688 16.34429,23.155043 C 12.742241,25.071087 10.249457,30.582861 12.133058,32.466463 C 13.356574,33.689978 16.006228,33.276145 23.53984,30.684904 C 28.618915,28.937918 29.966813,28.662556 32.576141,28.838877 C 34.262873,28.952856 36.509138,29.463721 37.567843,29.974131 C 40.610712,31.441128 44.592692,35.421686 46.457116,38.860228 C 48.064844,41.825336 48.169345,42.308965 48.168047,46.778296 C 48.166874,50.803563 47.984504,51.886435 46.986648,53.793139 C 44.496734,58.550861 40.595179,61.290357 34.455949,62.591631 C 30.362229,63.459336 27.994219,63.440001 24.137262,62.507368 z M 49.668071,31.240852 L 46.182982,27.728854 L 49.806774,24.105065 L 53.430562,20.481275 L 57.05435,24.105065 L 60.678142,27.728854 L 57.193053,31.240852 C 55.276258,33.172452 53.583135,34.752852 53.430562,34.752852 C 53.277989,34.752852 51.584867,33.172452 49.668071,31.240852 z"
       />;
    }

    Nn() {
        return <path
        className="letter"
       d="M 46.073367,50.895468 L 42.793885,47.711032 L 42.793885,27.842919 L 42.793885,7.9748054 L 39.150016,7.9748054 L 35.506147,7.9748054 L 35.506147,18.602404 C 35.506147,30.090505 35.233302,31.750572 32.826522,34.906024 C 31.426176,36.741972 28.305778,38.402472 25.375486,38.871044 C 20.35001,39.674649 13.091924,34.997335 9.7234664,28.784445 L 8.0556668,25.708302 L 7.8956184,16.841553 C 7.7784444,10.350152 7.579137,7.9748054 7.151634,7.9748054 C 6.2875338,7.9748054 0.28435299,1.757427 0.72450456,1.3170479 L 29.351862,1.3222529 L 57.126437,1.2286636 L 60.246244,4.6017342 L 63.366048,7.9748054 L 56.485621,7.9748054 L 49.605195,7.9748054 L 49.479023,31.027353 L 49.35285,54.079898 L 46.073367,50.895468 z M 21.635721,32.214732 C 24.420158,31.441683 26.540575,29.619809 27.951735,26.78798 C 29.131274,24.420954 29.190107,23.915032 29.190107,16.138848 L 29.190107,7.9748054 L 21.659444,7.9748054 L 14.128781,7.9748054 L 14.128781,18.348063 C 14.128781,24.509823 14.341383,29.331192 14.652438,30.223484 C 15.443471,32.492641 18.004446,33.222891 21.635721,32.214732 z"/>;
    }
}